{"$message_type":"diagnostic","message":"unused imports: `existing_file_ok::existing_file_ok`, `new_file_ok::new_file_ok`, `rejects_dir::assert_fn_rejects_dir_path`, and `rejects_exisitng_file::assert_fn_rejects_existing_file`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":239,"byte_end":273,"line_start":12,"line_end":12,"column_start":39,"column_end":73,"is_primary":true,"text":[{"text":"    existing_dir_ok::existing_dir_ok, existing_file_ok::existing_file_ok, new_dir_ok::new_dir_ok,","highlight_start":39,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":303,"byte_end":327,"line_start":13,"line_end":13,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    new_file_ok::new_file_ok, rejects_dir::assert_fn_rejects_dir_path,","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":329,"byte_end":368,"line_start":13,"line_end":13,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"    new_file_ok::new_file_ok, rejects_dir::assert_fn_rejects_dir_path,","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":374,"byte_end":428,"line_start":14,"line_end":14,"column_start":5,"column_end":59,"is_primary":true,"text":[{"text":"    rejects_exisitng_file::assert_fn_rejects_existing_file,","highlight_start":5,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":237,"byte_end":273,"line_start":12,"line_end":12,"column_start":37,"column_end":73,"is_primary":true,"text":[{"text":"    existing_dir_ok::existing_dir_ok, existing_file_ok::existing_file_ok, new_dir_ok::new_dir_ok,","highlight_start":37,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"fs_ext/src/test_utils/asserts/mod.rs","byte_start":297,"byte_end":428,"line_start":12,"line_end":14,"column_start":97,"column_end":59,"is_primary":true,"text":[{"text":"    existing_dir_ok::existing_dir_ok, existing_file_ok::existing_file_ok, new_dir_ok::new_dir_ok,","highlight_start":97,"highlight_end":98},{"text":"    new_file_ok::new_file_ok, rejects_dir::assert_fn_rejects_dir_path,","highlight_start":1,"highlight_end":71},{"text":"    rejects_exisitng_file::assert_fn_rejects_existing_file,","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `existing_file_ok::existing_file_ok`, `new_file_ok::new_file_ok`, `rejects_dir::assert_fn_rejects_dir_path`, and `rejects_exisitng_file::assert_fn_rejects_existing_file`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mfs_ext/src/test_utils/asserts/mod.rs:12:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    existing_dir_ok::existing_dir_ok, existing_file_ok::existing_file_ok, new_dir_ok::new_dir_ok,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    new_file_ok::new_file_ok, rejects_dir::assert_fn_rejects_dir_path,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    rejects_exisitng_file::assert_fn_rejects_existing_file,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `existing_file_ok` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"fs_ext/src/test_utils/asserts/existing_file_ok.rs","byte_start":39,"byte_end":55,"line_start":3,"line_end":3,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"pub fn existing_file_ok<F, T>(f: F) -> io::Result<()>","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `existing_file_ok` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mfs_ext/src/test_utils/asserts/existing_file_ok.rs:3:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn existing_file_ok<F, T>(f: F) -> io::Result<()>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `new_file_ok` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"fs_ext/src/test_utils/asserts/new_file_ok.rs","byte_start":35,"byte_end":46,"line_start":3,"line_end":3,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"pub fn new_file_ok<F, T>(f: F) -> io::Result<()>","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `new_file_ok` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mfs_ext/src/test_utils/asserts/new_file_ok.rs:3:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn new_file_ok<F, T>(f: F) -> io::Result<()>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `assert_fn_rejects_dir_path` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"fs_ext/src/test_utils/asserts/rejects_dir.rs","byte_start":39,"byte_end":65,"line_start":3,"line_end":3,"column_start":8,"column_end":34,"is_primary":true,"text":[{"text":"pub fn assert_fn_rejects_dir_path<F, T>(f: F) -> io::Result<()>","highlight_start":8,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `assert_fn_rejects_dir_path` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mfs_ext/src/test_utils/asserts/rejects_dir.rs:3:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn assert_fn_rejects_dir_path<F, T>(f: F) -> io::Result<()>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `assert_fn_rejects_existing_file` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"fs_ext/src/test_utils/asserts/rejects_exisitng_file.rs","byte_start":39,"byte_end":70,"line_start":3,"line_end":3,"column_start":8,"column_end":39,"is_primary":true,"text":[{"text":"pub fn assert_fn_rejects_existing_file<F, T>(f: F) -> io::Result<()>","highlight_start":8,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `assert_fn_rejects_existing_file` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mfs_ext/src/test_utils/asserts/rejects_exisitng_file.rs:3:8\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn assert_fn_rejects_existing_file<F, T>(f: F) -> io::Result<()>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"5 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 5 warnings emitted\u001b[0m\n\n"}
